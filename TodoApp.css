/* 追加のカスタムスタイルや余白調整 */
.mt-2 {
  margin-top: 1rem !important; /* Bulmaクラスに追加で1remほどトップマージン */
}

/* タスクリスト: 各タスクの区切り線や見栄えの調整 */
#taskList li {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  padding: 0.5rem 0;
  border-bottom: 1px solid #ddd;
  cursor: grab; /* ドラッグ可能に見えるようにカーソル変更 */
}
#taskList li:active {
  cursor: grabbing;
}

/* 最後のタスクの区切り線を消す */
#taskList li:last-child {
  border-bottom: none;
}

/* チェックボックスとテキストや期限日などの間に余白を付ける */
.task-checkbox {
  margin-right: 0.75rem;
}

.task-text {
  margin-right: 1rem;
  font-weight: bold;
}

.task-date {
  color: #555;
  font-size: 0.9rem;
}

/* ゴミ箱エリア */
#trashCan {
  border: 2px dashed #ff3860; /* Bulmaの危険色を意識した赤っぽい色 */
  margin-top: 2rem;
  padding: 2rem;
  transition: background-color 0.2s, border-color 0.2s;
}
#trashCan.drag-over {
  background-color: #ffeedf;
  border-color: #ff3860;
}

/* ----- ゴミ箱アイコン(ドラッグ中のアニメーション用) ----- */
#dustboxIcon {
  position: fixed;       /* 画面上を自由に動かす */
  top: 0;
  left: 0;
  pointer-events: none;  /* マウスイベントを透過 */
  width: 64px;           /* アイコンが大きい場合はここで縮小 */
  height: 64px;
  z-index: 9999;         /* 最前面に表示 */
  display: none;         /* 初期は非表示 */
  transform-origin: center center; /* スケールの原点を中央に */
}

/* ドラッグ中の稲妻エフェクト用のスタイル */
.dragging-lightning {
  position: fixed;
  pointer-events: none;
  z-index: 9998;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  display: none;
}

.dragging-lightning-line {
  position: absolute;
  width: 2px;
  height: 100%;
  background: linear-gradient(90deg, 
    transparent 0%,
    rgba(147, 51, 234, 0.4) 20%,
    rgba(147, 51, 234, 0.4) 80%,
    transparent 100%
  );
  transform-origin: top;
  animation: draggingLightning 0.5s ease-out infinite;
}

@keyframes draggingLightning {
  0% {
    transform: scaleY(0);
    opacity: 0;
  }
  50% {
    opacity: 0.8;
  }
  100% {
    transform: scaleY(1);
    opacity: 0;
  }
}

.dragging-lightning-spark {
  position: absolute;
  width: 4px;
  height: 4px;
  background: rgba(147, 51, 234, 0.8);
  border-radius: 50%;
  animation: spark 0.3s ease-out forwards;
}

@keyframes spark {
  0% {
    transform: scale(0);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 0;
  }
}

/* アイコンの周りを回る稲妻エフェクト用のスタイル */
.orbiting-lightning {
  position: fixed;
  pointer-events: none;
  z-index: 9998;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  display: none;
}

.orbiting-lightning-line {
  position: absolute;
  width: 2px;
  height: 30px;
  background: linear-gradient(90deg, 
    transparent 0%,
    rgba(147, 51, 234, 0.6) 20%,
    rgba(147, 51, 234, 0.6) 80%,
    transparent 100%
  );
  transform-origin: center;
  animation: orbitLightning 1s linear infinite;
}

@keyframes orbitLightning {
  0% {
    transform: rotate(0deg) translateX(40px) rotate(0deg);
  }
  100% {
    transform: rotate(360deg) translateX(40px) rotate(-360deg);
  }
}

.orbiting-lightning-spark {
  position: absolute;
  width: 4px;
  height: 4px;
  background: rgba(147, 51, 234, 0.8);
  border-radius: 50%;
  animation: orbitSpark 1s linear infinite;
}

@keyframes orbitSpark {
  0% {
    transform: rotate(0deg) translateX(40px) rotate(0deg);
  }
  100% {
    transform: rotate(360deg) translateX(40px) rotate(-360deg);
  }
}

/* 複数の稲妻の回転開始位置をずらすためのクラス */
.orbiting-lightning-line:nth-child(1) { animation-delay: 0s; }
.orbiting-lightning-line:nth-child(2) { animation-delay: 0.2s; }
.orbiting-lightning-line:nth-child(3) { animation-delay: 0.4s; }
.orbiting-lightning-line:nth-child(4) { animation-delay: 0.6s; }
.orbiting-lightning-line:nth-child(5) { animation-delay: 0.8s; }

.orbiting-lightning-spark:nth-child(1) { animation-delay: 0.1s; }
.orbiting-lightning-spark:nth-child(2) { animation-delay: 0.3s; }
.orbiting-lightning-spark:nth-child(3) { animation-delay: 0.5s; }
.orbiting-lightning-spark:nth-child(4) { animation-delay: 0.7s; }
.orbiting-lightning-spark:nth-child(5) { animation-delay: 0.9s; }

/* ドロップ時のダークモードと稲妻エフェクト用のスタイル */
.dark-mode-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.95);
  z-index: 9997;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  display: flex;
  justify-content: center;
  align-items: center;
}

.dark-mode-overlay.active {
  opacity: 1;
}

/* TASK KILLテキストのスタイル */
.task-kill-text {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 6rem;
  font-weight: bold;
  color: #ff0000;
  text-shadow: 0 0 20px rgba(255, 0, 0, 0.8);
  z-index: 9999;
  opacity: 0;
  animation: taskKillText 1.5s ease-out forwards;
  font-family: 'Arial', sans-serif;
  letter-spacing: 0.2em;
  padding: 80px 120px;
  background: linear-gradient(45deg, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.5));
  backdrop-filter: blur(10px);
  box-shadow: 0 0 50px rgba(255, 0, 0, 0.5);
  border-radius: 30px;
  white-space: nowrap;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  box-sizing: border-box;
}

/* タスクキルテキストの周りの赤線用のコンテナ */
.task-kill-border {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 800px;
  height: 240px;
  z-index: 9998;
  pointer-events: none;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  box-sizing: border-box;
}

/* 赤線のスタイル */
.task-kill-border::before,
.task-kill-border::after {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  border: 6px solid transparent;
  border-radius: 30px;
  animation: borderAnimation 1.5s ease-out forwards;
  box-shadow: 0 0 20px rgba(255, 0, 0, 0.5);
  margin: 0;
  box-sizing: border-box;
}

.task-kill-border::before {
  border-top: 6px solid #ff0000;
  border-right: 6px solid #ff0000;
  animation: borderTopRight 1.5s ease-out forwards;
}

.task-kill-border::after {
  border-bottom: 6px solid #ff0000;
  border-left: 6px solid #ff0000;
  animation: borderBottomLeft 1.5s ease-out forwards;
}

@keyframes borderTopRight {
  0% {
    clip-path: inset(0 100% 100% 0);
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    clip-path: inset(0 0 0 0);
    opacity: 1;
  }
}

@keyframes borderBottomLeft {
  0% {
    clip-path: inset(100% 0 0 100%);
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    clip-path: inset(0 0 0 0);
    opacity: 1;
  }
}

@keyframes borderAnimation {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 1;
  }
}

@keyframes taskKillText {
  0% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.5);
  }
  50% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.2);
  }
  100% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }
}

/* ドロップ時の稲妻エフェクト */
.drop-lightning {
  position: fixed;
  pointer-events: none;
  z-index: 9998;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  display: none;
}

.drop-lightning-line {
  position: absolute;
  width: 6px;
  height: 100%;
  background: linear-gradient(90deg, 
    transparent 0%,
    rgba(255, 0, 0, 1) 20%,
    rgba(255, 0, 0, 0.8) 50%,
    rgba(255, 0, 0, 1) 80%,
    transparent 100%
  );
  transform-origin: top;
  animation: dropLightning 1.5s ease-out forwards;
  filter: drop-shadow(0 0 10px rgba(255, 0, 0, 0.8));
}

/* 斜めの稲妻用のスタイル */
.drop-lightning-line.diagonal {
  transform-origin: center;
  animation: diagonalLightning 1.5s ease-out forwards;
}

@keyframes diagonalLightning {
  0% {
    transform: scaleY(0) rotate(45deg);
    opacity: 0;
  }
  20% {
    opacity: 1;
  }
  80% {
    opacity: 1;
  }
  100% {
    transform: scaleY(1) rotate(45deg);
    opacity: 0;
  }
}

/* 複数の稲妻の開始位置をずらすためのクラス */
.drop-lightning-line:nth-child(1) { left: 10%; animation-delay: 0s; }
.drop-lightning-line:nth-child(2) { left: 30%; animation-delay: 0.2s; }
.drop-lightning-line:nth-child(3) { left: 50%; animation-delay: 0.4s; }
.drop-lightning-line:nth-child(4) { left: 70%; animation-delay: 0.6s; }
.drop-lightning-line:nth-child(5) { left: 90%; animation-delay: 0.8s; }

/* 斜めの稲妻の位置 */
.drop-lightning-line.diagonal:nth-child(6) { left: 20%; animation-delay: 0.1s; }
.drop-lightning-line.diagonal:nth-child(7) { left: 40%; animation-delay: 0.3s; }
.drop-lightning-line.diagonal:nth-child(8) { left: 60%; animation-delay: 0.5s; }
.drop-lightning-line.diagonal:nth-child(9) { left: 80%; animation-delay: 0.7s; }

/* 基本スタイル */
body {
  font-family: 'Arial', sans-serif;
  margin: 0;
  padding: 20px;
  background-color: #f5f5f5;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

h1 {
  text-align: center;
  color: #333;
  margin-bottom: 30px;
}

/* 統計情報 */
.task-stats {
  display: flex;
  justify-content: space-around;
  margin-bottom: 20px;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 8px;
}

.stat-item {
  text-align: center;
}

.stat-label {
  display: block;
  font-size: 0.9em;
  color: #666;
}

.stat-value {
  display: block;
  font-size: 1.5em;
  font-weight: bold;
  color: #333;
}

/* フィルターと検索 */
.filters {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
  flex-wrap: wrap;
}

.search-input,
.filter-select {
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.search-input {
  flex: 1;
  min-width: 200px;
}

.filter-select {
  min-width: 150px;
}

/* タスク入力フォーム */
.task-input-container {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

#taskNameInput {
  flex: 1;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 16px;
}

#dueDateInput {
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

#addTaskButton {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s;
}

#addTaskButton:hover {
  background-color: #45a049;
}

/* タスクリスト */
.task-list {
  list-style: none;
  padding: 0;
}

.task-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  margin-bottom: 10px;
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 4px;
  transition: all 0.3s;
  cursor: grab;
}

.task-item:active {
  cursor: grabbing;
}

.task-item:hover {
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.task-content {
  display: flex;
  align-items: center;
  gap: 10px;
}

.task-text {
  flex: 1;
  margin-right: 1rem;
  font-weight: bold;
}

.task-date {
  color: #555;
  font-size: 0.9rem;
}

.task-actions {
  display: flex;
  gap: 5px;
}

.edit-btn,
.delete-btn {
  padding: 5px 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
}

.edit-btn {
  background-color: #2196F3;
  color: white;
}

.delete-btn {
  background-color: #f44336;
  color: white;
}

.edit-btn:hover {
  background-color: #1976D2;
}

.delete-btn:hover {
  background-color: #d32f2f;
}

/* 完了したタスク */
.task-item.completed {
  background-color: #f8f9fa;
  opacity: 0.7;
}

.task-item.completed .task-text {
  text-decoration: line-through;
  color: #666;
}

/* 編集フォーム */
.edit-form {
  display: flex;
  gap: 10px;
  margin-top: 10px;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.edit-input {
  flex: 1;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.save-btn,
.cancel-btn {
  padding: 8px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.save-btn {
  background-color: #4CAF50;
  color: white;
}

.cancel-btn {
  background-color: #f44336;
  color: white;
}

/* ゴミ箱 */
.trash-can {
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 60px;
  height: 60px;
  background-color: #f44336;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  transition: all 0.3s;
}

.trash-can i {
  color: white;
  font-size: 24px;
}

.trash-can:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

/* ドラッグ&ドロップ */
.task-item.dragging {
  opacity: 0.5;
  cursor: move;
}

/* レスポンシブデザイン */
@media (max-width: 600px) {
  .container {
    padding: 10px;
  }

  .filters {
    flex-direction: column;
  }

  .task-input-container {
    flex-direction: column;
  }

  .task-item {
    flex-direction: column;
    gap: 10px;
  }

  .task-actions {
    width: 100%;
    justify-content: flex-end;
  }
}
